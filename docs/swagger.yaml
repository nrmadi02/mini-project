basePath: /api/v1
definitions:
  domain.Tag:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  http.ReviewValue:
    properties:
      review:
        type: string
    type: object
  request.CreateEnterpriseRequest:
    properties:
      address:
        type: string
      description:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      name:
        type: string
      number_phone:
        type: string
      postcode:
        type: integer
      tags:
        items:
          type: string
        type: array
    type: object
  request.CreateTagRequest:
    properties:
      name:
        type: string
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  request.UserCreateRequest:
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  response.JSONBadRequestResult:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: boolean
    type: object
  response.JSONSuccessDeleteResult:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: boolean
    type: object
  response.JSONSuccessResult:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      status:
        type: boolean
    type: object
  response.JSONUnauthorizedResult:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: boolean
    type: object
  response.SuccessLogin:
    properties:
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
  response.TagsListResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  response.UserCreateResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  response.UserDetailResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      enterprises:
        items: {}
        type: array
      favorite: {}
      fullname:
        type: string
      id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  response.UsersListResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is a UMKM management application
  title: UMKM applications Documentation
  version: "2.0"
paths:
  /enterprise:
    post:
      consumes:
      - application/json
      description: create new enterprise
      parameters:
      - description: required
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CreateEnterpriseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Create new enterprise
      tags:
      - Enterprise
  /enterprise/{id}:
    delete:
      consumes:
      - application/json
      description: delete enterprise
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JSONSuccessDeleteResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JSONUnauthorizedResult'
      security:
      - JWT: []
      summary: Delete enterprise by id
      tags:
      - Enterprise
    get:
      consumes:
      - application/json
      description: get detail enterprise
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JSONSuccessDeleteResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Get detail by id
      tags:
      - Enterprise
    put:
      consumes:
      - application/json
      description: Update enterprise
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      - description: required
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CreateEnterpriseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Update enterprise by id
      tags:
      - Enterprise
  /enterprise/{id}/distance:
    get:
      consumes:
      - application/json
      description: get distance from you to enterprise
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      - description: longitude
        in: query
        name: longitude
        required: true
        type: string
      - description: latitude
        in: query
        name: latitude
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JSONSuccessResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Get distance
      tags:
      - Enterprise
  /enterprise/{id}/rating:
    post:
      consumes:
      - application/json
      description: add rating enterprise rate 1-5
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      - description: value rate
        in: query
        name: value
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Add rating enterprise
      tags:
      - Rating
  /enterprise/{id}/rating/user/{userid}:
    delete:
      consumes:
      - application/json
      description: remove rating user
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      - description: user id
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JSONSuccessDeleteResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Remove rating
      tags:
      - Rating
    get:
      consumes:
      - application/json
      description: cek rating user
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      - description: user id
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Cek rating
      tags:
      - Rating
    put:
      consumes:
      - application/json
      description: update rating
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      - description: user id
        in: path
        name: userid
        required: true
        type: string
      - description: value
        in: query
        name: value
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Update rating
      tags:
      - Rating
  /enterprise/{id}/status:
    put:
      consumes:
      - application/json
      description: 0 = draft, 1 = publish
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      - description: status
        enum:
        - 0
        - 1
        in: query
        name: status
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JSONUnauthorizedResult'
      security:
      - JWT: []
      summary: Update status enterprise
      tags:
      - Enterprise
  /enterprises:
    get:
      consumes:
      - application/json
      description: get all list enterprises
      parameters:
      - description: search by name
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Get list enterprises
      tags:
      - Enterprise
  /enterprises/{status}:
    get:
      consumes:
      - application/json
      description: status draft and publish
      parameters:
      - description: status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Get list enterprise by status
      tags:
      - Enterprise
  /favorite:
    delete:
      consumes:
      - application/json
      description: remove favorite enterprise
      parameters:
      - description: enterprise id
        in: body
        name: data
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Remove favorite
      tags:
      - favorite
    get:
      consumes:
      - application/json
      description: get favorite enterprise
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Get favorite
      tags:
      - favorite
    post:
      consumes:
      - application/json
      description: add favorite enterprise
      parameters:
      - description: enterprise id
        in: body
        name: data
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Add favorite
      tags:
      - favorite
  /login:
    post:
      consumes:
      - application/json
      description: Login for get JWT token
      parameters:
      - description: required
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/response.SuccessLogin'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JSONUnauthorizedResult'
      summary: Login user
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Register for create new user
      parameters:
      - description: required
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/response.UserCreateResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      summary: Register new user
      tags:
      - Auth
  /review/{id}:
    get:
      consumes:
      - application/json
      description: get detail review enterprise
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Get Detail Review
      tags:
      - Review
  /review/enterprise/{id}:
    delete:
      consumes:
      - application/json
      description: delete review enterprise
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      - description: user id
        in: query
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JSONSuccessDeleteResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Delete Review
      tags:
      - Review
    get:
      consumes:
      - application/json
      description: get list review enterprise
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Get List Review
      tags:
      - Review
    post:
      consumes:
      - application/json
      description: add review enterprise
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      - description: user id
        in: query
        name: userid
        required: true
        type: string
      - description: value review
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/http.ReviewValue'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Add Review
      tags:
      - Review
    put:
      consumes:
      - application/json
      description: update review enterprise
      parameters:
      - description: enterprise id
        in: path
        name: id
        required: true
        type: string
      - description: user id
        in: query
        name: userid
        required: true
        type: string
      - description: value review
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/http.ReviewValue'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Update Review
      tags:
      - Review
  /tag:
    post:
      consumes:
      - application/json
      description: create tag can access only admin
      parameters:
      - description: required
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CreateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/domain.Tag'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JSONUnauthorizedResult'
      security:
      - JWT: []
      summary: Create tag
      tags:
      - Tag
  /tag/{id}:
    delete:
      consumes:
      - application/json
      description: delete tag can access only admin
      parameters:
      - description: tag id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.JSONSuccessDeleteResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JSONUnauthorizedResult'
      security:
      - JWT: []
      summary: Delete tag by id
      tags:
      - Tag
  /tags:
    get:
      consumes:
      - application/json
      description: Get list tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.TagsListResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
      security:
      - JWT: []
      summary: Get list tags
      tags:
      - Tag
  /user:
    get:
      consumes:
      - application/json
      description: User id get default by claims JWT Token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  $ref: '#/definitions/response.UserDetailResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JSONUnauthorizedResult'
      security:
      - JWT: []
      summary: Get detail user by JWT Token
      tags:
      - User
  /users:
    get:
      consumes:
      - application/json
      description: Get list users can access only admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.JSONSuccessResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.UsersListResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.JSONBadRequestResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.JSONUnauthorizedResult'
      security:
      - JWT: []
      summary: Get list users
      tags:
      - User
schemes:
- http
- https
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
