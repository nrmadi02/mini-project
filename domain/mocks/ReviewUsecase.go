// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/nrmadi02/mini-project/domain"
	mock "github.com/stretchr/testify/mock"
)

// ReviewUsecase is an autogenerated mock type for the ReviewUsecase type
type ReviewUsecase struct {
	mock.Mock
}

// AddReview provides a mock function with given fields: enterpriseid, userid, value
func (_m *ReviewUsecase) AddReview(enterpriseid string, userid string, value string) (domain.Review, error) {
	ret := _m.Called(enterpriseid, userid, value)

	var r0 domain.Review
	if rf, ok := ret.Get(0).(func(string, string, string) domain.Review); ok {
		r0 = rf(enterpriseid, userid, value)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(enterpriseid, userid, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReview provides a mock function with given fields: enterpriseid, userid
func (_m *ReviewUsecase) DeleteReview(enterpriseid string, userid string) error {
	ret := _m.Called(enterpriseid, userid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(enterpriseid, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDetailReviewByID provides a mock function with given fields: id
func (_m *ReviewUsecase) GetDetailReviewByID(id string) (domain.Review, error) {
	ret := _m.Called(id)

	var r0 domain.Review
	if rf, ok := ret.Get(0).(func(string) domain.Review); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListReviewsByEnterpriseID provides a mock function with given fields: id
func (_m *ReviewUsecase) GetListReviewsByEnterpriseID(id string) ([]interface{}, error) {
	ret := _m.Called(id)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(string) []interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviewByUserIDAndEnterpriseID provides a mock function with given fields: enterpriseid, userid
func (_m *ReviewUsecase) GetReviewByUserIDAndEnterpriseID(enterpriseid string, userid string) (domain.Review, error) {
	ret := _m.Called(enterpriseid, userid)

	var r0 domain.Review
	if rf, ok := ret.Get(0).(func(string, string) domain.Review); ok {
		r0 = rf(enterpriseid, userid)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(enterpriseid, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReview provides a mock function with given fields: enterpriseid, userid, value
func (_m *ReviewUsecase) UpdateReview(enterpriseid string, userid string, value string) (domain.Review, error) {
	ret := _m.Called(enterpriseid, userid, value)

	var r0 domain.Review
	if rf, ok := ret.Get(0).(func(string, string, string) domain.Review); ok {
		r0 = rf(enterpriseid, userid, value)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(enterpriseid, userid, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
