// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/nrmadi02/mini-project/domain"
	mock "github.com/stretchr/testify/mock"
)

// EnterpriseRepository is an autogenerated mock type for the EnterpriseRepository type
type EnterpriseRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: enterprise
func (_m *EnterpriseRepository) Delete(enterprise domain.Enterprise) error {
	ret := _m.Called(enterprise)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Enterprise) error); ok {
		r0 = rf(enterprise)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: search, page, length
func (_m *EnterpriseRepository) FindAll(search string, page int, length int) (domain.Enterprises, int, error) {
	ret := _m.Called(search, page, length)

	var r0 domain.Enterprises
	if rf, ok := ret.Get(0).(func(string, int, int) domain.Enterprises); ok {
		r0 = rf(search, page, length)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Enterprises)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int, int) int); ok {
		r1 = rf(search, page, length)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(search, page, length)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: id
func (_m *EnterpriseRepository) FindByID(id string) (domain.Enterprise, error) {
	ret := _m.Called(id)

	var r0 domain.Enterprise
	if rf, ok := ret.Get(0).(func(string) domain.Enterprise); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Enterprise)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDs provides a mock function with given fields: ids
func (_m *EnterpriseRepository) FindByIDs(ids []string) (domain.Enterprises, error) {
	ret := _m.Called(ids)

	var r0 domain.Enterprises
	if rf, ok := ret.Get(0).(func([]string) domain.Enterprises); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Enterprises)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatusDraft provides a mock function with given fields:
func (_m *EnterpriseRepository) FindByStatusDraft() (domain.Enterprises, error) {
	ret := _m.Called()

	var r0 domain.Enterprises
	if rf, ok := ret.Get(0).(func() domain.Enterprises); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Enterprises)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatusPublish provides a mock function with given fields:
func (_m *EnterpriseRepository) FindByStatusPublish() (domain.Enterprises, error) {
	ret := _m.Called()

	var r0 domain.Enterprises
	if rf, ok := ret.Get(0).(func() domain.Enterprises); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Enterprises)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: id
func (_m *EnterpriseRepository) FindByUserID(id string) (domain.Enterprises, error) {
	ret := _m.Called(id)

	var r0 domain.Enterprises
	if rf, ok := ret.Get(0).(func(string) domain.Enterprises); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Enterprises)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: enterprise
func (_m *EnterpriseRepository) Save(enterprise domain.Enterprise) (domain.Enterprise, error) {
	ret := _m.Called(enterprise)

	var r0 domain.Enterprise
	if rf, ok := ret.Get(0).(func(domain.Enterprise) domain.Enterprise); ok {
		r0 = rf(enterprise)
	} else {
		r0 = ret.Get(0).(domain.Enterprise)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Enterprise) error); ok {
		r1 = rf(enterprise)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: enterprise, req
func (_m *EnterpriseRepository) Update(enterprise domain.Enterprise, req domain.Enterprise) (domain.Enterprise, error) {
	ret := _m.Called(enterprise, req)

	var r0 domain.Enterprise
	if rf, ok := ret.Get(0).(func(domain.Enterprise, domain.Enterprise) domain.Enterprise); ok {
		r0 = rf(enterprise, req)
	} else {
		r0 = ret.Get(0).(domain.Enterprise)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Enterprise, domain.Enterprise) error); ok {
		r1 = rf(enterprise, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusByID provides a mock function with given fields: id, status
func (_m *EnterpriseRepository) UpdateStatusByID(id string, status int) (domain.Enterprise, error) {
	ret := _m.Called(id, status)

	var r0 domain.Enterprise
	if rf, ok := ret.Get(0).(func(string, int) domain.Enterprise); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Get(0).(domain.Enterprise)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
