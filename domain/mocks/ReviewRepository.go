// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/nrmadi02/mini-project/domain"
	mock "github.com/stretchr/testify/mock"
)

// ReviewRepository is an autogenerated mock type for the ReviewRepository type
type ReviewRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: review
func (_m *ReviewRepository) Add(review domain.Review) (domain.Review, error) {
	ret := _m.Called(review)

	var r0 domain.Review
	if rf, ok := ret.Get(0).(func(domain.Review) domain.Review); ok {
		r0 = rf(review)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Review) error); ok {
		r1 = rf(review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: review
func (_m *ReviewRepository) Delete(review domain.Review) error {
	ret := _m.Called(review)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Review) error); ok {
		r0 = rf(review)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEnterpriseID provides a mock function with given fields: id
func (_m *ReviewRepository) FindByEnterpriseID(id string) (domain.Reviews, error) {
	ret := _m.Called(id)

	var r0 domain.Reviews
	if rf, ok := ret.Get(0).(func(string) domain.Reviews); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Reviews)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *ReviewRepository) FindByID(id string) (domain.Review, error) {
	ret := _m.Called(id)

	var r0 domain.Review
	if rf, ok := ret.Get(0).(func(string) domain.Review); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIDAndEnterpriseID provides a mock function with given fields: enterpriseid, userid
func (_m *ReviewRepository) FindByUserIDAndEnterpriseID(enterpriseid string, userid string) (domain.Review, error) {
	ret := _m.Called(enterpriseid, userid)

	var r0 domain.Review
	if rf, ok := ret.Get(0).(func(string, string) domain.Review); ok {
		r0 = rf(enterpriseid, userid)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(enterpriseid, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: enterpriseid, userid, value
func (_m *ReviewRepository) Update(enterpriseid string, userid string, value string) (domain.Review, error) {
	ret := _m.Called(enterpriseid, userid, value)

	var r0 domain.Review
	if rf, ok := ret.Get(0).(func(string, string, string) domain.Review); ok {
		r0 = rf(enterpriseid, userid, value)
	} else {
		r0 = ret.Get(0).(domain.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(enterpriseid, userid, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
