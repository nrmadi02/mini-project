// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/nrmadi02/mini-project/domain"
	mock "github.com/stretchr/testify/mock"

	request "github.com/nrmadi02/mini-project/web/request"
)

// EnterpriseUsecase is an autogenerated mock type for the EnterpriseUsecase type
type EnterpriseUsecase struct {
	mock.Mock
}

// CreateNewEnterprise provides a mock function with given fields: _a0, userid
func (_m *EnterpriseUsecase) CreateNewEnterprise(_a0 request.CreateEnterpriseRequest, userid string) (domain.Enterprise, error) {
	ret := _m.Called(_a0, userid)

	var r0 domain.Enterprise
	if rf, ok := ret.Get(0).(func(request.CreateEnterpriseRequest, string) domain.Enterprise); ok {
		r0 = rf(_a0, userid)
	} else {
		r0 = ret.Get(0).(domain.Enterprise)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.CreateEnterpriseRequest, string) error); ok {
		r1 = rf(_a0, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnterpriseByID provides a mock function with given fields: id
func (_m *EnterpriseUsecase) DeleteEnterpriseByID(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDetailEnterpriseByID provides a mock function with given fields: id
func (_m *EnterpriseUsecase) GetDetailEnterpriseByID(id string) (domain.Enterprise, error) {
	ret := _m.Called(id)

	var r0 domain.Enterprise
	if rf, ok := ret.Get(0).(func(string) domain.Enterprise); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Enterprise)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListAllEnterprise provides a mock function with given fields: search, page, length
func (_m *EnterpriseUsecase) GetListAllEnterprise(search string, page int, length int) (domain.Enterprises, int, error) {
	ret := _m.Called(search, page, length)

	var r0 domain.Enterprises
	if rf, ok := ret.Get(0).(func(string, int, int) domain.Enterprises); ok {
		r0 = rf(search, page, length)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Enterprises)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int, int) int); ok {
		r1 = rf(search, page, length)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(search, page, length)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListEnterpriseByStatus provides a mock function with given fields: status
func (_m *EnterpriseUsecase) GetListEnterpriseByStatus(status int) (domain.Enterprises, error) {
	ret := _m.Called(status)

	var r0 domain.Enterprises
	if rf, ok := ret.Get(0).(func(int) domain.Enterprises); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Enterprises)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnterpriseByID provides a mock function with given fields: id, userid, _a2
func (_m *EnterpriseUsecase) UpdateEnterpriseByID(id string, userid string, _a2 request.CreateEnterpriseRequest) (domain.Enterprise, error) {
	ret := _m.Called(id, userid, _a2)

	var r0 domain.Enterprise
	if rf, ok := ret.Get(0).(func(string, string, request.CreateEnterpriseRequest) domain.Enterprise); ok {
		r0 = rf(id, userid, _a2)
	} else {
		r0 = ret.Get(0).(domain.Enterprise)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, request.CreateEnterpriseRequest) error); ok {
		r1 = rf(id, userid, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusEnterprise provides a mock function with given fields: id, status
func (_m *EnterpriseUsecase) UpdateStatusEnterprise(id string, status int) (domain.Enterprise, error) {
	ret := _m.Called(id, status)

	var r0 domain.Enterprise
	if rf, ok := ret.Get(0).(func(string, int) domain.Enterprise); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Get(0).(domain.Enterprise)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
