// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/nrmadi02/mini-project/domain"
	mock "github.com/stretchr/testify/mock"
)

// FavoriteRepository is an autogenerated mock type for the FavoriteRepository type
type FavoriteRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: favorite
func (_m *FavoriteRepository) Add(favorite domain.Favorite) (domain.Favorite, error) {
	ret := _m.Called(favorite)

	var r0 domain.Favorite
	if rf, ok := ret.Get(0).(func(domain.Favorite) domain.Favorite); ok {
		r0 = rf(favorite)
	} else {
		r0 = ret.Get(0).(domain.Favorite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Favorite) error); ok {
		r1 = rf(favorite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *FavoriteRepository) FindAll() (domain.Favorites, error) {
	ret := _m.Called()

	var r0 domain.Favorites
	if rf, ok := ret.Get(0).(func() domain.Favorites); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Favorites)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *FavoriteRepository) FindByID(id string) (domain.Favorite, error) {
	ret := _m.Called(id)

	var r0 domain.Favorite
	if rf, ok := ret.Get(0).(func(string) domain.Favorite); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Favorite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: id
func (_m *FavoriteRepository) FindByUserID(id string) (domain.Favorite, error) {
	ret := _m.Called(id)

	var r0 domain.Favorite
	if rf, ok := ret.Get(0).(func(string) domain.Favorite); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Favorite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: favorite, enterprises, types
func (_m *FavoriteRepository) Update(favorite domain.Favorite, enterprises domain.Enterprises, types string) (domain.Favorite, error) {
	ret := _m.Called(favorite, enterprises, types)

	var r0 domain.Favorite
	if rf, ok := ret.Get(0).(func(domain.Favorite, domain.Enterprises, string) domain.Favorite); ok {
		r0 = rf(favorite, enterprises, types)
	} else {
		r0 = ret.Get(0).(domain.Favorite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Favorite, domain.Enterprises, string) error); ok {
		r1 = rf(favorite, enterprises, types)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
