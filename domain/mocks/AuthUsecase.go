// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/nrmadi02/mini-project/domain"
	mock "github.com/stretchr/testify/mock"

	request "github.com/nrmadi02/mini-project/web/request"

	response "github.com/nrmadi02/mini-project/web/response"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

// CheckIfUserIsAdmin provides a mock function with given fields: id
func (_m *AuthUsecase) CheckIfUserIsAdmin(id string) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetails provides a mock function with given fields: id
func (_m *AuthUsecase) GetUserDetails(id string) (domain.User, domain.Favorite, domain.Enterprises, error) {
	ret := _m.Called(id)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 domain.Favorite
	if rf, ok := ret.Get(1).(func(string) domain.Favorite); ok {
		r1 = rf(id)

	} else {
		r1 = ret.Get(1).(domain.Favorite)
	}

	var r2 domain.Enterprises
	if rf, ok := ret.Get(2).(func(string) domain.Enterprises); ok {
		r2 = rf(id)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(domain.Enterprises)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(id)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Login provides a mock function with given fields: _a0
func (_m *AuthUsecase) Login(_a0 request.LoginRequest) (response.SuccessLogin, error) {
	ret := _m.Called(_a0)

	var r0 response.SuccessLogin
	if rf, ok := ret.Get(0).(func(request.LoginRequest) response.SuccessLogin); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(response.SuccessLogin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.LoginRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *AuthUsecase) Register(_a0 request.UserCreateRequest) (domain.User, error) {
	ret := _m.Called(_a0)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(request.UserCreateRequest) domain.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.UserCreateRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
