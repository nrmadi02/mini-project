// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/nrmadi02/mini-project/domain"
	mock "github.com/stretchr/testify/mock"
)

// TagRepository is an autogenerated mock type for the TagRepository type
type TagRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: tag, id
func (_m *TagRepository) Delete(tag domain.Tag, id string) error {
	ret := _m.Called(tag, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Tag, string) error); ok {
		r0 = rf(tag, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllTags provides a mock function with given fields:
func (_m *TagRepository) FindAllTags() (domain.Tags, error) {
	ret := _m.Called()

	var r0 domain.Tags
	if rf, ok := ret.Get(0).(func() domain.Tags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Tags)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *TagRepository) FindByID(id string) (domain.Tag, error) {
	ret := _m.Called(id)

	var r0 domain.Tag
	if rf, ok := ret.Get(0).(func(string) domain.Tag); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDs provides a mock function with given fields: ids
func (_m *TagRepository) FindByIDs(ids []string) (domain.Tags, error) {
	ret := _m.Called(ids)

	var r0 domain.Tags
	if rf, ok := ret.Get(0).(func([]string) domain.Tags); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Tags)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *TagRepository) FindByName(name string) (domain.Tag, error) {
	ret := _m.Called(name)

	var r0 domain.Tag
	if rf, ok := ret.Get(0).(func(string) domain.Tag); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(domain.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: tag
func (_m *TagRepository) Save(tag domain.Tag) (domain.Tag, error) {
	ret := _m.Called(tag)

	var r0 domain.Tag
	if rf, ok := ret.Get(0).(func(domain.Tag) domain.Tag); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Get(0).(domain.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Tag) error); ok {
		r1 = rf(tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
