// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/nrmadi02/mini-project/domain"
	mock "github.com/stretchr/testify/mock"
)

// FavoriteUsecase is an autogenerated mock type for the FavoriteUsecase type
type FavoriteUsecase struct {
	mock.Mock
}

// AddFavorite provides a mock function with given fields: ids, userid
func (_m *FavoriteUsecase) AddFavorite(ids []string, userid string) (domain.Favorite, error) {
	ret := _m.Called(ids, userid)

	var r0 domain.Favorite
	if rf, ok := ret.Get(0).(func([]string, string) domain.Favorite); ok {
		r0 = rf(ids, userid)
	} else {
		r0 = ret.Get(0).(domain.Favorite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(ids, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailByID provides a mock function with given fields: id
func (_m *FavoriteUsecase) GetDetailByID(id string) (domain.Favorite, error) {
	ret := _m.Called(id)

	var r0 domain.Favorite
	if rf, ok := ret.Get(0).(func(string) domain.Favorite); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Favorite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailByUserID provides a mock function with given fields: id
func (_m *FavoriteUsecase) GetDetailByUserID(id string) (domain.Favorite, error) {
	ret := _m.Called(id)

	var r0 domain.Favorite
	if rf, ok := ret.Get(0).(func(string) domain.Favorite); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Favorite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFavorite provides a mock function with given fields: ids, userid
func (_m *FavoriteUsecase) RemoveFavorite(ids []string, userid string) (domain.Favorite, error) {
	ret := _m.Called(ids, userid)

	var r0 domain.Favorite
	if rf, ok := ret.Get(0).(func([]string, string) domain.Favorite); ok {
		r0 = rf(ids, userid)
	} else {
		r0 = ret.Get(0).(domain.Favorite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(ids, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
